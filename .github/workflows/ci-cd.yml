name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.8'
  AWS_REGION: us-west-2
  CLUSTER_NAME: ai-devsecops-cluster
  IMAGE_NAME: ai-devsecops/threat-detector
  HELM_CHART_PATH: helm/ai-devsecops

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort pylint
        
    - name: Run linting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
        pylint src/ tests/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Run security scans
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        bandit -r src/
        safety check
        
    - name: Container security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'

  test:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests with coverage
      run: |
        pip install pytest pytest-cov
        pytest tests/ --cov=src/ --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and cache Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Configure Kubernetes context
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }}
        
    - name: Run pre-deployment checks
      run: |
        kubectl get nodes
        helm lint ${{ env.HELM_CHART_PATH }}
        
    - name: Deploy to EKS
      run: |
        helm upgrade --install ai-devsecops ${{ env.HELM_CHART_PATH }} \
          --set image.tag=${{ github.sha }} \
          --wait --timeout 5m
        
    - name: Verify deployment
      run: |
        kubectl get pods -l app=threat-detector
        kubectl rollout status deployment/threat-detector